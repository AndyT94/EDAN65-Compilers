aspect CodeGen {

	public void Program.genCode(PrintStream out) {
		out.println(".global _start");
		out.println(".data");
		out.println("buf: .skip 1024");
		out.println();
		out.println(".text");
		out.println("_start:");
		
		// call main function
		out.println("call main");
		
		// call sys_exit
		out.println("        movq $0, %rdi");
		out.println("        movq $60, %rax");
		out.println("        syscall"); // done!
		
		for (Function func: getFunctionList()) {
			func.genCode(out);
		}
		

		
		// helper functions
		out.println("# Procedure to read number from stdin");
		out.println("# C signature: long int read(void)");
		out.println("read:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $0, %rdi");
		out.println("        movq $buf, %rsi");
		out.println("        movq $1024, %rdx");
		out.println("        movq $0, %rax");
		out.println("        syscall                 # %rax = sys_read(0, buf, 1024)");
		out.println("        ### convert string to integer:");
		out.println("        ### %rax contains nchar");
		out.println("        ### %rsi contains ptr");
		out.println("        movq $0, %rdx           # sum = 0");
		out.println("atoi_loop:");
		out.println("        cmpq $0, %rax           # while (nchar > 0)");
		out.println("        jle atoi_done           # leave loop if nchar <= 0");
		out.println("        movzbq (%rsi), %rbx     # move byte, and sign extend to qword");
		out.println("        cmpq $0x30, %rbx        # test if < '0'");
		out.println("        jl atoi_done            # character is not numeric");
		out.println("        cmpq $0x39, %rbx        # test if > '9'");
		out.println("        jg atoi_done            # character is not numeric");
		out.println("        imulq $10, %rdx         # multiply sum by 10");
		out.println("        subq $0x30, %rbx        # value of character");
		out.println("        addq %rbx, %rdx         # add to sum");
		out.println("        incq %rsi               # step to next char");
		out.println("        decq %rax               # nchar--");
		out.println("        jmp atoi_loop           # loop back");
		out.println("atoi_done:");
		out.println("        movq %rdx, %rax         # return value in RAX");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("# Procedure to print number to stdout");
		out.println("# C signature: void print(long int)");
		out.println("print:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        ### convert integer to string");
		out.println("        movq 16(%rbp), %rax     # parameter");
		out.println("        movq $(buf+1023), %rsi  # write ptr (start from end of buf)");
		out.println("        movb $0x0a, (%rsi)      # insert newline");
		out.println("        movq $1, %rcx           # string length");
		out.println("itoa_loop:                      # do.. while (at least one iteration)");
		out.println("        movq $10, %rbx");
		out.println("        movq $0, %rdx");
		out.println("        idivq %rbx              # divide rdx:rax by 10");
		out.println("        addb $0x30, %dl         # remainder + '0'");
		out.println("        decq %rsi               # move string pointer");
		out.println("        movb %dl, (%rsi)");
		out.println("        incq %rcx               # increment string length");
		out.println("        cmpq $0, %rax");
		out.println("        jg itoa_loop            # produce more digits");
		out.println("itoa_done:");
		out.println("        movq $1, %rdi");
		out.println("        movq %rcx, %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("print_string:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $1, %rdi");
		out.println("        movq 16(%rbp), %rsi");
		out.println("        movq 24(%rbp), %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
	}
	
	
	public void Function.genCode(PrintStream out) {
		out.println(getId_decl().getID() + ":");
		out.println("\t pushq %rbp");
		out.println("\t movq %rsp, %rbp");
		out.println("\t subq $" + (getBlock().numLocals()*8) + ", %rsp");
		getBlock().genCode(out);
	}
	
	public void Block.genCode(PrintStream out) {
		for(Stmt s: getStmts()) {
			s.genCode(out);
		}
	}
	
	abstract void Stmt.genCode(PrintStream out);
	
	public void Assign.genCode(PrintStream out) {
		getExpr().genCode(out);
		out.println("\t movq %rax, " + getId_use().decl().address());
	}
	
	public void Decl.genCode(PrintStream out) {
		if(hasExpr()) {
			getExpr().genCode(out);
			out.println("\t movq %rax, " + getId_decl().address());
		} else {
			out.println("\t movq $0, " + getId_decl().address());
		}
	}
	
	public void While.genCode(PrintStream out) {
		String startLabel = enclosedFunction().getId_decl().getID() + "_" + pathname() + "whilestart";
		out.println(startLabel + ":");
		String label = enclosedFunction().getId_decl().getID() + "_" + pathname() + "whileend";
		getExpr().genConditionalJump(out, label);
		getBlock().genCode(out);
		out.println("\t jmp " + startLabel);
		out.println(label + ":");
	}
	
	public void If.genCode(PrintStream out) {
		if(hasElse()) {
			String elselabel = enclosedFunction().getId_decl().getID() + "_" + pathname() + "else";
			String iflabel = enclosedFunction().getId_decl().getID() + "_" + pathname() + "ifend";
			getExpr().genConditionalJump(out, elselabel);
			getIf().genCode(out);
			out.println("\t jmp " + iflabel);
			out.println(elselabel + ":");
			getElse().genCode(out);
			out.println(iflabel + ":");
		} else {
			String iflabel = enclosedFunction().getId_decl().getID() + "_" + pathname() + "ifend";
			getExpr().genConditionalJump(out, iflabel);
			getIf().genCode(out);
			out.println(iflabel + ":");
		}	
	}
	
	public void Return.genCode(PrintStream out) {
		getExpr().genCode(out);
		out.println("\t movq %rbp, %rsp");
		out.println("\t popq %rbp");
		out.println("\t ret");
		out.println();
	}
	
	public void CallStmt.genCode(PrintStream out) {
		getFunctionExpr().genCode(out);
	}
	
	abstract void Expr.genCode(PrintStream out);
	
	public void FunctionExpr.genCode(PrintStream out) {
		int nbrParams = getExprs().getNumExpr();
		for(int i = nbrParams - 1; i >= 0; i--) {
			getExprs().getExpr(i).genCode(out);
			out.println("\t push %rax");
		}
		out.println("\t call " + getId_use().getID());
		out.println("\t addq $" + (nbrParams*8) + ", %rsp");
	}
	
	public void Id_use.genCode(PrintStream out) {
		out.println("\t movq " + decl().address() + ", %rax");
	}
	
	public void BinExpr.genCode(PrintStream out) {}
	
	public void Add.genCode(PrintStream out) {
		getLeft().genCode(out);
		out.println("\t pushq %rax");
		getRight().genCode(out);
		out.println("\t movq %rax, %rbx");
		out.println("\t popq %rax");
		out.println("\t addq %rbx, %rax");
	}
	
	public void Sub.genCode(PrintStream out) {
		getLeft().genCode(out);
		out.println("\t pushq %rax");
		getRight().genCode(out);
		out.println("\t movq %rax, %rbx");
		out.println("\t popq %rax");
		out.println("\t subq %rbx, %rax");
	}
	
	public void Mul.genCode(PrintStream out) {
		getLeft().genCode(out);
		out.println("\t pushq %rax");
		getRight().genCode(out);
		out.println("\t movq %rax, %rbx");
		out.println("\t popq %rax");
		out.println("\t imulq %rbx, %rax");
	}
	
	public void Div.genCode(PrintStream out) {
		getLeft().genCode(out);
		out.println("\t pushq %rax");
		getRight().genCode(out);
		out.println("\t movq %rax, %rbx");
		out.println("\t popq %rax");
		out.println("\t movq $0, %rdx");// NB: clear RDX to prepare division RDX:RAX / RBX
		out.println("\t idivq %rbx");
	}
	
	public void Mod.genCode(PrintStream out) {
		getLeft().genCode(out);
		out.println("\t pushq %rax");
		getRight().genCode(out);
		out.println("\t movq %rax, %rbx");
		out.println("\t popq %rax");
		out.println("\t movq $0, %rdx");// NB: clear RDX to prepare division RDX:RAX / RBX
		out.println("\t idivq %rbx");
		out.println("\t movq %rdx, %rax");
	}
	
	public void Expr.genConditionalJump(PrintStream out, String label) {}
	
	public void BinExpr.genConditionalJump(PrintStream out, String label) {
		genCode(out);
		out.println(label);
	}
	
	public void Equal.genCode(PrintStream out) {
		getLeft().genCode(out);
		out.println("\t pushq %rax");
		getRight().genCode(out);
		out.println("\t movq %rax, %rbx");
		out.println("\t popq %rax");
		out.println("\t cmpq %rbx, %rax");
		out.print("\t jne ");
		
	}
	
	public void NotEqual.genCode(PrintStream out) {
		getLeft().genCode(out);
		out.println("\t pushq %rax");
		getRight().genCode(out);
		out.println("\t movq %rax, %rbx");
		out.println("\t popq %rax");
		out.println("\t cmpq %rbx, %rax");
		out.print("\t je ");
	}
	
	public void Greater.genCode(PrintStream out) {
		getLeft().genCode(out);
		out.println("\t pushq %rax");
		getRight().genCode(out);
		out.println("\t movq %rax, %rbx");
		out.println("\t popq %rax");
		out.println("\t cmpq %rbx, %rax");
		out.print("\t jle ");
	}
	
	public void Lesser.genCode(PrintStream out) {
		getLeft().genCode(out);
		out.println("\t pushq %rax");
		getRight().genCode(out);
		out.println("\t movq %rax, %rbx");
		out.println("\t popq %rax");
		out.println("\t cmpq %rbx, %rax");
		out.print("\t jge ");
	}
	
	public void GreatEqual.genCode(PrintStream out) {
		getLeft().genCode(out);
		out.println("\t pushq %rax");
		getRight().genCode(out);
		out.println("\t movq %rax, %rbx");
		out.println("\t popq %rax");
		out.println("\t cmpq %rbx, %rax");
		out.print("\t jl ");
	}
	
	public void LessEqual.genCode(PrintStream out) {
		getLeft().genCode(out);
		out.println("\t pushq %rax");
		getRight().genCode(out);
		out.println("\t movq %rax, %rbx");
		out.println("\t popq %rax");
		out.println("\t cmpq %rbx, %rax");
		out.print("\t jg ");
	}
	
	
	public void Numeral.genCode(PrintStream out) {
		out.println("\t movq $" + getNUMERAL() + ", %rax");
	}
	
	/**
 	 * Address of local variable variable in the current stack frame.
 	 */
	inh String Id_decl.address();
	eq Decl.getId_decl().address() = "-"+(getId_decl().localIndex()*8-8)+"(%rbp)";
	eq Params.getId_decl(int index).address() = (16 + index*8) + "(%rbp)";

	/**
 	 * Local variable counting.
 	 */
	syn int ASTNode.numLocals() = lastNode().localIndex() - localIndex();

	/**
 	 * Local variable numbering.
 	 */
	syn int ASTNode.localIndex() = prevNode().localIndex();
	eq Program.localIndex() = 0;
	eq Function.localIndex() = 0;
	eq Id_decl.localIndex() = prevNode().localIndex() + 1;

	inh ASTNode ASTNode.prevNode();
	eq ASTNode.getChild(int i).prevNode() = prevNode(i);
	syn ASTNode ASTNode.lastNode() = prevNode(getNumChild());
	syn ASTNode ASTNode.prevNode(int i) = i>0 ? getChild(i-1).lastNode() : this;
	
	
	syn String Stmt.pathname() = index();
	inh String Stmt.index();
}