aspect Visitor {
	/**
	 * Visitor interface for Calc language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(Exprs node, Object data);
		public Object visit(FunctionExpr node, Object data);
		public Object visit(Function node, Object data);
		public Object visit(Params node, Object data);
		public Object visit(Block node, Object data);
		public Object visit(While node, Object data);
		public Object visit(If node, Object data);
		public Object visit(Decl node, Object data);
		public Object visit(Return node, Object data);
		public Object visit(CallStmt node, Object data);
		public Object visit(Assign node, Object data);	
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(Mul node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Mod node, Object data);
		public Object visit(Add node, Object data);
		public Object visit(Sub node, Object data);
		public Object visit(Equal node, Object data);
		public Object visit(NotEqual node, Object data);
		public Object visit(Greater node, Object data);
		public Object visit(Lesser node, Object data);
		public Object visit(LessEqual node, Object data);
		public Object visit(GreatEqual node, Object data);
		public Object visit(Numeral node, Object data);
		public Object visit(Id_decl node, Object data);
		public Object visit(Id_use node, Object data);
	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
		public Object Exprs.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
		public Object FunctionExpr.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
		public Object Block.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
		public Object Params.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
		public Object Function.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
		public Object While.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
		public Object If.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
		public Object Decl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
		public Object Return.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
		public Object CallStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
		public Object Assign.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mul.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Div.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mod.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Add.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Sub.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Equal.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object NotEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Greater.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Lesser.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object LessEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object GreatEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Numeral.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Id_decl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Id_use.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
}
